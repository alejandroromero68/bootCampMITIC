# -*- coding: utf-8 -*-
"""Metodos_de_Entrada_y_Salida.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LjSfvyA1uANsa5azTRRScRtYAuN9DxIl

# **Métodos de Entrada y Salida en Python: print, pprint y input; Manejo de Cadenas**

**Introducción**

En este capítulo, exploraremos los métodos básicos de entrada y salida en Python, que son fundamentales para interactuar con el usuario y mostrar información. Nos centraremos en los métodos print, pprint y input, así como en las operaciones con cadenas y sus métodos asociados. Estos conceptos son esenciales para escribir programas que puedan comunicarse de manera efectiva con los usuarios y manipular texto de diversas maneras.

**Método print**

El método print en Python se utiliza para mostrar información en la pantalla. Es una de las funciones más básicas y utilizadas en la programación. Vamos a explorar su uso y algunas de sus funcionalidades avanzadas.

**Uso Básico de print**

El uso más sencillo de print es mostrar una cadena de texto:
"""

print("Hola, mundo!")

"""**Imprimir Múltiples Elementos**

Puedes usar print para mostrar múltiples elementos separados por comas. Python automáticamente añade un espacio entre ellos:
"""

nombre = "Juan"
edad = 30
print("Nombre:", nombre, "Edad:", edad)

"""**Parámetro sep**

El parámetro sep permite especificar el separador que se utilizará entre los elementos:
"""

print("Nombre:", nombre, "Edad:", edad, sep=" - ")

"""**Parámetro end**

El parámetro end permite definir lo que se imprimirá al final de la salida. Por defecto, print añade una nueva línea
"""

print("Hola", end=" ")
print("mundo!")

"""**Formato de Cadenas**

Para mostrar mensajes más complejos, puedes utilizar el método format o las f-strings (en Python 3.6+):
"""

print("Nombre: {} Edad: {}".format(nombre, edad))
print(f"Nombre: {nombre} Edad: {edad}")

"""**Método pprint**
El método pprint (pretty print) del módulo pprint se utiliza para imprimir estructuras de datos complejas de manera más legible. Esto es particularmente útil para listas y diccionarios anidados.

**Uso de pprint**

Primero, necesitas importar el módulo pprint:

Luego, puedes utilizar pprint para imprimir una estructura de datos compleja:
"""

from pprint import pprint
datos = {
    "nombre": "Juan",
    "edad": 30,
    "hobbies": ["leer", "correr", "programar"],
    "educacion": {
        "primaria": "Escuela A",
        "secundaria": "Escuela B",
        "universidad": "Universidad C"
    }
}

pprint(datos)

"""**Parámetros de pprint**

El método pprint permite ajustar la anchura de la salida y el nivel de anidamiento:
"""

pprint(datos, width=40, depth=2)

"""**Método input**

El método input se utiliza para capturar la entrada del usuario. Esta función espera a que el usuario ingrese datos y luego devuelve lo que se haya escrito como una cadena de texto.

**Uso Básico de input**

Para capturar la entrada del usuario, simplemente llama a input con un mensaje opcional:
"""

nombre = input("¿Cuál es tu nombre? ")
print(f"Hola, {nombre}!")

"""**Conversión de Tipos**

La entrada de input siempre es una cadena, por lo que si necesitas un número, deberás convertirlo:
"""

edad = input("¿Cuántos años tienes? ")
edad = int(edad)  # Convertir a entero
print(f"Tienes {edad} años.")



"""**Cadenas y Métodos de Cadenas**
Las cadenas en Python son secuencias de caracteres. Python ofrece una amplia variedad de métodos para trabajar con cadenas. Vamos a explorar algunos de los métodos más comunes y útiles.

**Concatenación de Cadenas**

Puedes concatenar (unir) cadenas utilizando el operador +:
"""

saludo = "Hola"
nombre = "Juan"
mensaje = saludo + " " + nombre
print(mensaje)

"""# **Métodos de Cadenas**
**upper y lower:** Estos métodos convierten una cadena a mayúsculas o minúsculas respectivamente.

**len:** Devuelve la longitud de una cadena.

**strip, lstrip, rstrip:** Estos métodos eliminan los espacios en blanco desde ambos extremos, el inicio o el final de una cadena.

**split y join:** split divide una cadena en una lista de subcadenas, y join une una lista de subcadenas en una sola cadena.

**replace:** Reemplaza una subcadena por otra.

**find y index:** Buscan una subcadena dentro de una cadena y devuelven la posición de su primer carácter. find devuelve -1 si no encuentra la subcadena, mientras que index genera una excepción.

**startswith y endswith:** Verifican si una cadena comienza o termina con una subcadena específica.

**count:** Cuenta el número de veces que una subcadena aparece en una cadena.
"""

#1. Upper y lowe
texto = "Hola Mundo"
print(texto.upper())  # "HOLA MUNDO"
print(texto.lower())  # "hola mundo"
#2. len
print(len(texto))  # 10
texto = "   Hola Mundo   "
#3. strip, lstrip y rstrip
print(texto.strip())   # "Hola Mundo"
print(texto.lstrip())  # "Hola Mundo   "
print(texto.rstrip())  # "   Hola Mundo"
#4. split
texto = "Hola, Mundo, Python"
lista = texto.split(", ")  # ['Hola', 'Mundo', 'Python']
print(lista)
nuevo_texto = " ".join(lista)
print(nuevo_texto)  # "Hola Mundo Python"
#5. replace
texto = "Hola Mundo"
nuevo_texto = texto.replace("Mundo", "Python")
print(nuevo_texto)  # "Hola Python"
#6. find, index
texto = "Hola Mundo"
print(texto.find("Mundo"))  # 5
print(texto.index("Mundo"))  # 5
#7. startswith, endswith
texto = "Hola Mundo"
print(texto.startswith("Hola"))  # True
print(texto.endswith("Mundo"))  # True
#8. count
texto = "Hola Mundo Hola"
print(texto.count("Hola"))  # 2